"""Pseudocode for factory method.
"""

// The abstract factory interface declares a set of methods that
// return different abstract products. These products are called
// a family and are related by a high-level theme or concept.
// Products of one family are usually able to collaborate among
// themselves. A family of products may have several variants,
// products of another variant.
// but the products of one variant are incompatible with the

interface GUIFactory is
    method createButton():Button
    method createCheckbox():Checkbock

// Concrete factories produce a family of products that belong
// to a single variant. The factory guarantees that the
// resulting products are compatible. Signatures of the concrete
// factory's methods return an abstract product, while inside
// the method a concrete product is instantiated.
class WinFactory implements GUIFactory is
    method createButton():Button is
        return new WindButton()
    method createCheckbox():Checkbock is
        return new WinCheckbox()

class MacFactory implements GUIFactory is
    method createButton():Button is
        return new MacButton()
    method createCheckbox():Checkbock is
        return new MacCheckbock()

// Each distinct product of a product fanily should have a base interface.
//  All variants of the product must implement this interface.
interface Button is
    method paint()

// Concrete products are created by corresponding concrete factories.
class WinButton implements Button is
    method paint() is
        // Render a button in Windows style.
class MacButton implements Button is
    method paint() is

interface Checkbox is
    method paint()

// Concrete products are created by corresponding concrete factories.
class WinCheckbox implements Checkbox is
    method paint() is
        // Render a Checkbox in Windows style.
class MacCheckbox implements Checkbox is
    method paint() is

// Client code only work with abstract typeL: GUIFactory, Button and Checlbox.
class Application is
    private field button: Button
    constructor Application(factory: GUIFactory) is
        this.factory = factory
    method createUI() is
        this.button = factory.createButton()
    method paint() is
        button.paint()

// The application picks the factory type depending on the
// current configuration or environment settings and creates it
// at runtime (usually at the initialization stage).
class ApplicationConfigurator is
    method main() is
        config = readApplicationConfigFile()

        if (config.OS == "Window") then
            factory = new WindFactory()
        else if (config.OS == "Mac") then
            factory = new MacFactory()
        else
            throw new Exception("Error!")

        Application app = new Application(factory)